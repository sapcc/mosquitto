diff --git a/mosquitto.conf b/mosquitto.conf
index 99af968..199fbab 100644
--- a/mosquitto.conf
+++ b/mosquitto.conf
@@ -212,8 +212,16 @@
 # If require_certificate is true, you may set use_identity_as_username to true
 # to use the CN value from the client certificate as a username. If this is
 # true, the password_file option will not be used for this listener.
+# This takes priority over use_subject_as_username.
+# See also use_subject_as_username.
 #use_identity_as_username false
 
+# If require_certificate is true, you may set use_subject_as_username to true
+# to use the complete subject value from the client certificate as a username.
+# If this is true, the password_file option will not be used for this listener.
+# See also use_identity_as_username
+#use_subject_as_username false
+
 # If you have require_certificate set to true, you can create a certificate
 # revocation list file to revoke access to particular client certificates. If
 # you have done this, use crlfile to point to the PEM encoded revocation file.
diff --git a/src/conf.c b/src/conf.c
index a3e233d..6cffb45 100644
--- a/src/conf.c
+++ b/src/conf.c
@@ -194,6 +194,7 @@ void mqtt3_config_init(struct mqtt3_config *config)
 	config->default_listener.require_certificate = false;
 	config->default_listener.crlfile = NULL;
 	config->default_listener.use_identity_as_username = false;
+	config->default_listener.use_subject_as_username = false;
 #endif
 	config->listeners = NULL;
 	config->listener_count = 0;
@@ -387,6 +388,7 @@ int mqtt3_config_parse_args(struct mqtt3_config *config, int argc, char *argv[])
 			|| config->default_listener.require_certificate
 			|| config->default_listener.crlfile
 			|| config->default_listener.use_identity_as_username
+			|| config->default_listener.use_subject_as_username
 #endif
 			|| config->default_listener.use_username_as_clientid
 			|| config->default_listener.host
@@ -436,6 +438,7 @@ int mqtt3_config_parse_args(struct mqtt3_config *config, int argc, char *argv[])
 		config->listeners[config->listener_count-1].ssl_ctx = NULL;
 		config->listeners[config->listener_count-1].crlfile = config->default_listener.crlfile;
 		config->listeners[config->listener_count-1].use_identity_as_username = config->default_listener.use_identity_as_username;
+		config->listeners[config->listener_count-1].use_subject_as_username = config->default_listener.use_subject_as_username;
 #endif
 	}
 
@@ -1709,6 +1712,13 @@ int _config_read_file_core(struct mqtt3_config *config, bool reload, const char
 #else
 					_mosquitto_log_printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
 #endif
+				}else if(!strcmp(token, "use_subject_as_username")){
+#ifdef WITH_TLS
+					if(reload) continue; // Listeners not valid for reloading.
+					if(_conf_parse_bool(&token, "use_subject_as_username", &cur_listener->use_subject_as_username, saveptr)) return MOSQ_ERR_INVAL;
+#else
+					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
+#endif
 				}else if(!strcmp(token, "user")){
 					if(reload) continue; // Drop privileges user not valid for reloading.
 					if(_conf_parse_string(&token, "user", &config->user, saveptr)) return MOSQ_ERR_INVAL;
diff --git a/src/mosquitto_broker.h b/src/mosquitto_broker.h
index f33007c..ec1a0b7 100644
--- a/src/mosquitto_broker.h
+++ b/src/mosquitto_broker.h
@@ -91,6 +91,7 @@ struct _mqtt3_listener {
 	SSL_CTX *ssl_ctx;
 	char *crlfile;
 	bool use_identity_as_username;
+	bool use_subject_as_username;
 	char *tls_version;
 #endif
 #ifdef WITH_WEBSOCKETS
diff --git a/src/read_handle_server.c b/src/read_handle_server.c
index 6be6a25..71d19ea 100644
--- a/src/read_handle_server.c
+++ b/src/read_handle_server.c
@@ -335,7 +335,7 @@ int mqtt3_handle_connect(struct mosquitto_db *db, struct mosquitto *context)
 	}
 
 #ifdef WITH_TLS
-	if(context->listener && context->listener->ssl_ctx && context->listener->use_identity_as_username){
+	if(context->listener && context->listener->ssl_ctx && (context->listener->use_identity_as_username || context->listener->use_subject_as_username)){
 		if(!context->ssl){
 			_mosquitto_send_connack(context, 0, CONNACK_REFUSED_BAD_USERNAME_PASSWORD);
 			rc = 1;
@@ -363,15 +363,33 @@ int mqtt3_handle_connect(struct mosquitto_db *db, struct mosquitto *context)
 				rc = 1;
 				goto handle_connect_error;
 			}
-
-			i = X509_NAME_get_index_by_NID(name, NID_commonName, -1);
-			if(i == -1){
-				_mosquitto_send_connack(context, 0, CONNACK_REFUSED_BAD_USERNAME_PASSWORD);
-				rc = 1;
-				goto handle_connect_error;
+			if (context->listener->use_identity_as_username) { //use_identity_as_username
+				i = X509_NAME_get_index_by_NID(name, NID_commonName, -1);
+				if(i == -1){
+					_mosquitto_send_connack(context, 0, CONNACK_REFUSED_BAD_USERNAME_PASSWORD);
+					rc = 1;
+					goto handle_connect_error;
+				}
+				name_entry = X509_NAME_get_entry(name, i);
+				if(name_entry){
+					context->username = _mosquitto_strdup((char *)ASN1_STRING_data(X509_NAME_ENTRY_get_data(name_entry)));
+				}
+			} else { // use_subject_as_username
+				BIO *subject_bio = BIO_new(BIO_s_mem());
+				X509_NAME_print_ex(subject_bio, X509_get_subject_name(client_cert), 0, XN_FLAG_RFC2253);
+				char *data_start = NULL;
+				long name_length = BIO_get_mem_data(subject_bio, &data_start);
+				char *subject = _mosquitto_malloc(sizeof(char)*name_length+1);
+				if(!subject){
+					BIO_free(subject_bio);
+					rc = MOSQ_ERR_NOMEM;
+					goto handle_connect_error;
+				}
+				memcpy(subject, data_start, name_length);
+				subject[name_length] = '\0';
+				BIO_free(subject_bio);
+				context->username = subject;
 			}
-			name_entry = X509_NAME_get_entry(name, i);
-			context->username = _mosquitto_strdup((char *)ASN1_STRING_data(X509_NAME_ENTRY_get_data(name_entry)));
 			if(!context->username){
 				rc = 1;
 				goto handle_connect_error;
